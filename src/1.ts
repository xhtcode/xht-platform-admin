const config = [
  {
    category: '基础信息：代码生成的通用基础配置，包含包路径、时间等核心基础参数',
    name: '代码生成基础包名',
    value: 'packageName',
    type: 'String',
    desc: '生成代码的根包路径，用于指定类文件所在包结构',
    example:
      '#set($basePackage = ${packageName}) // 赋值给变量\npackage ${packageName}.controller; // 直接用于包声明',
  },
  {
    category: '基础信息：代码生成的通用基础配置，包含包路径、时间等核心基础参数',
    name: '当前生成时间',
    value: 'nowDate',
    type: 'String',
    desc: '代码生成时的当前日期时间，用于代码注释',
    example: '/**\n * 生成时间：${nowDate}\n */',
  },
  {
    category: '表结构核心信息：与数据库表直接关联的配置，包含表标识、类型、归属等表级参数',
    name: '数据表唯一ID',
    value: 'tableId',
    type: 'Long',
    desc: '数据库表在系统中的唯一标识ID，用于关联表相关配置',
    example: '// 关联表ID\nprivate Long tableId = ${tableId};',
  },
  {
    category: '表结构核心信息：与数据库表直接关联的配置，包含表标识、类型、归属等表级参数',
    name: '表所属业务分组ID',
    value: 'groupId',
    type: 'Long',
    desc: '表对应的业务分组唯一ID，用于按业务模块归类表',
    example: '// 绑定表所属业务分组\nprivate Long groupId = ${groupId};',
  },
  {
    category: '表结构核心信息：与数据库表直接关联的配置，包含表标识、类型、归属等表级参数',
    name: '数据源ID',
    value: 'dataSourceId',
    type: 'Long',
    desc: '表所在数据源的唯一标识，多数据源场景下用于区分数据来源',
    example: '// 指定表对应的数据源\nprivate Long dataSourceId = ${dataSourceId};',
  },
  {
    category: '表结构核心信息：与数据库表直接关联的配置，包含表标识、类型、归属等表级参数',
    name: '数据库类型',
    value: 'dataBaseType',
    type: 'String',
    desc: '表所在数据库的类型，如MySQL、Oracle等，用于适配不同数据库语法',
    example:
      "#if(${dataBaseType} == 'MySQL')\n  // MySQL特有的SQL语法\n#elseif(${dataBaseType} == 'Oracle')\n  // Oracle特有的SQL语法\n#end",
  },
  {
    category: '表结构核心信息：与数据库表直接关联的配置，包含表标识、类型、归属等表级参数',
    name: '数据库存储引擎',
    value: 'engineName',
    type: 'String',
    desc: '数据库表使用的存储引擎，如InnoDB、MyISAM',
    example: '// 表存储引擎信息\nprivate String engine = "${engineName}";',
  },
  {
    category: '表结构核心信息：与数据库表直接关联的配置，包含表标识、类型、归属等表级参数',
    name: '数据库表名',
    value: 'tableName',
    type: 'String',
    desc: '数据库中表的原始名称（不含前缀/后缀）',
    example: '// 绑定数据库表\n@TableName("${tableName}")\npublic class ${codeNameUpperFirst} {',
  },
  {
    category: '表结构核心信息：与数据库表直接关联的配置，包含表标识、类型、归属等表级参数',
    name: '数据表注释',
    value: 'tableComment',
    type: 'String',
    desc: '数据库表的业务含义注释，用于生成代码类的说明',
    example: '/**\n * ${tableComment}\n * @author ${backEndAuthor}\n */',
  },
  {
    category: '表结构核心信息：与数据库表直接关联的配置，包含表标识、类型、归属等表级参数',
    name: '业务模块名称',
    value: 'moduleName',
    type: 'String',
    desc: '表所属的业务模块，如system（系统模块）、order（订单模块）',
    example: '// 按模块划分包路径\npackage ${packageName}.${moduleName}.service;',
  },
  {
    category: '表结构核心信息：与数据库表直接关联的配置，包含表标识、类型、归属等表级参数',
    name: '微服务名称',
    value: 'serviceName',
    type: 'String',
    desc: '表对应的微服务名称，用于跨服务调用时的标识',
    example:
      '// 微服务间调用的服务名\nprivate static final String SERVICE_NAME = "${serviceName}";',
  },
  {
    category: '代码命名规范：控制生成代码的类名、字段名等命名格式，保证代码风格统一',
    name: '代码类名（首字母小写）',
    value: 'codeName',
    type: 'String',
    desc: '生成代码的类名（首字母小写），用于变量、方法参数等场景',
    example: '// 定义Service变量\nprivate ${codeNameUpperFirst}Service ${codeName}Service;',
  },
  {
    category: '代码命名规范：控制生成代码的类名、字段名等命名格式，保证代码风格统一',
    name: '代码类名（首字母大写）',
    value: 'codeNameUpperFirst',
    type: 'String',
    desc: '生成代码的类名（首字母大写），用于类定义、DTO/VO 名称等',
    example: '// 定义实体类\npublic class ${codeNameUpperFirst} implements Serializable {',
  },
  {
    category: '代码命名规范：控制生成代码的类名、字段名等命名格式，保证代码风格统一',
    name: '代码类注释',
    value: 'codeComment',
    type: 'String',
    desc: '生成代码类的业务含义注释',
    example: '/**\n * 功能：${codeComment}\n * 作者：${backEndAuthor}\n */',
  },
  {
    category: '代码命名规范：控制生成代码的类名、字段名等命名格式，保证代码风格统一',
    name: '后端开发者',
    value: 'backEndAuthor',
    type: 'String',
    desc: '后端代码的开发人员姓名，用于代码注释中的作者信息',
    example: '/**\n * 作者：${backEndAuthor}\n * 日期：${nowDate}\n */',
  },
  {
    category: '代码命名规范：控制生成代码的类名、字段名等命名格式，保证代码风格统一',
    name: '前端开发者',
    value: 'frontEndAuthor',
    type: 'String',
    desc: '前端代码的开发人员姓名，用于前端文件注释中的作者信息',
    example: '// 作者：${frontEndAuthor}\n// 功能：${codeComment}\nconst ${codeName}Api = {};',
  },
  {
    category: '接口与权限配置：控制接口路由、权限标识、菜单关联等接口层相关参数',
    name: '接口URL前缀',
    value: 'urlPrefix',
    type: 'String',
    desc: '生成接口的URL根路径，用于Controller层路由定义',
    example:
      '// 配置接口路由\n@RequestMapping("${urlPrefix}")\n@RestController\npublic class ${codeNameUpperFirst}Controller {',
  },
  {
    category: '接口与权限配置：控制接口路由、权限标识、菜单关联等接口层相关参数',
    name: '权限标识前缀',
    value: 'permissionPrefix',
    type: 'String',
    desc: '接口对应的权限标识前缀，用于权限控制注解',
    example:
      '// 配置接口权限\n@PreAuthorize("hasPermission(\'\', \'${permissionPrefix}:list\')")\n@GetMapping("/list")\npublic Result list() {',
  },
  {
    category: '接口与权限配置：控制接口路由、权限标识、菜单关联等接口层相关参数',
    name: '父菜单ID',
    value: 'parentMenuId',
    type: 'Long',
    desc: '生成菜单对应的父菜单唯一ID，用于菜单层级关联',
    example:
      '// 配置菜单父级\nmenu.setParentId(${parentMenuId});\nmenu.setName("${tableComment}");',
  },
  {
    category: '前端页面配置：控制前端页面布局、样式、表单排序等前端展示相关参数',
    name: '页面样式',
    value: 'pageStyle',
    type: 'String',
    desc: '前端页面的布局风格，如default（默认）、card（卡片式）',
    example: '<div class="page-container ${pageStyle}">\n  <!-- 页面内容 -->\n</div>',
  },
  {
    category: '前端页面配置：控制前端页面布局、样式、表单排序等前端展示相关参数',
    name: '页面宽度',
    value: 'pageStyleWidth',
    type: 'String',
    desc: '前端页面的固定宽度（带单位）',
    example: '${pageStyleWidth}',
  },
  {
    category: '前端页面配置：控制前端页面布局、样式、表单排序等前端展示相关参数',
    name: '表单序号',
    value: 'fromNumber',
    type: 'Integer',
    desc: '多表单场景下，当前表单的排序序号',
    example:
      '<el-step title="表单${fromNumber}" :active="${fromNumber}-1">\n  <!-- 表单${fromNumber}内容 -->\n</el-step>',
  },
  {
    category: '依赖导入配置：控制生成代码需导入的Java类，自动处理类依赖',
    name: '需导入的Java类集合',
    value: 'importPackage',
    type: 'Set',
    desc: '生成代码时需要导入的Java类全路径集合（去重）',
    example: '#foreach($pkg in ${importPackage}) // 遍历导入所有依赖类\nimport ${pkg};\n#end',
  },
  {
    category: 'ID生成器：预生成的唯一标识，用于实体主键、配置项ID等固定唯一标识场景',
    name: '雪花算法ID（1-10）',
    value: 'id1~id10',
    type: 'Long',
    desc: '预生成的10个雪花算法ID，用于实体主键、配置项ID等',
    example:
      '// 生成固定ID的菜单配置\nprivate static final Long MENU_ID = ${id1};\nprivate static final Long BUTTON_ID = ${id2};',
  },
  {
    category: 'ID生成器：预生成的唯一标识，用于实体主键、配置项ID等固定唯一标识场景',
    name: '简化UUID（1-10）',
    value: 'uuid1~uuid10',
    type: 'String',
    desc: '预生成的10个无横杠简化UUID，用于分布式场景唯一标识',
    example: '// 生成唯一缓存Key\nprivate static final String CACHE_KEY = "${codeName}:${uuid1}";',
  },
  {
    category:
      '列信息集合：核心字段配置，包含表所有列、主键列、过滤后列的详细信息，用于生成字段、表单、列表等',
    name: '所有列信息集合',
    value: 'allColumns',
    type: 'Array',
    desc: '表中所有列的详细信息集合，每个元素为单列信息Map',
    example:
      '#foreach($col in ${allColumns}) // 遍历所有列生成实体字段\n  /**\n   * ${col.codeComment}\n   */\n  private ${col.codeJava} ${col.codeName};\n#end',
    info: [
      {
        category: '列信息子项：单列的基础标识属性',
        name: '列唯一ID',
        value: 'id',
        type: 'Long',
        desc: '列在系统中的唯一标识ID',
        example: '// 列配置ID\ncolumn.setId(${col.id});',
      },
      {
        category: '列信息子项：单列的数据库属性',
        name: '数据库字段名',
        value: 'dbName',
        type: 'String',
        desc: '数据库表中列的原始字段名',
        example: '@TableField("${col.dbName}")\nprivate ${col.codeJava} ${col.codeName};',
      },
      {
        category: '列信息子项：单列的数据库属性',
        name: '数据库字段类型',
        value: 'dbType',
        type: 'String',
        desc: '数据库中列的字段类型（如VARCHAR、INT、DATETIME）',
        example: "#if(${col.dbType} == 'VARCHAR')\n  // 字符串类型处理\n#end",
      },
      {
        category: '列信息子项：单列的数据库属性',
        name: '是否为主键',
        value: 'dbPrimary',
        type: 'Integer',
        desc: '列是否为主键（枚举值：1=是，0=否）',
        example:
          '#if(${col.dbPrimary} == 1)\n  @TableId\n#end\nprivate ${col.codeJava} ${col.codeName};',
      },
      {
        category: '列信息子项：单列的数据库属性',
        name: '是否为必填字段',
        value: 'dbRequired',
        type: 'Integer',
        desc: '列是否为数据库级必填（非空约束，枚举值：1=是，0=否）',
        example:
          '#if(${col.dbRequired} == 1)\n  <el-form-item prop="${col.codeName}" required>\n#else\n  <el-form-item prop="${col.codeName}">\n#end',
      },
      {
        category: '列信息子项：单列的数据库属性',
        name: '数据库字段注释',
        value: 'dbComment',
        type: 'String',
        desc: '数据库中列的业务含义注释',
        example: '// 数据库字段说明：${col.dbComment}',
      },
      {
        category: '列信息子项：单列的数据库属性',
        name: '数据库字段长度',
        value: 'dbLength',
        type: 'Integer',
        desc: '数据库中列的字段长度（如VARCHAR(50)对应长度50）',
        example: '@Column(length = ${col.dbLength})\nprivate ${col.codeJava} ${col.codeName};',
      },
      {
        category: '列信息子项：单列的代码命名属性',
        name: '代码字段名（首字母小写）',
        value: 'codeName',
        type: 'String',
        desc: '生成代码中列对应的字段名（首字母小写，如userName）',
        example: 'private ${col.codeJava} ${col.codeName};',
      },
      {
        category: '列信息子项：单列的代码命名属性',
        name: '代码字段名（首字母大写）',
        value: 'codeNameUpperFirst',
        type: 'String',
        desc: '生成代码中列对应的字段名（首字母大写，用于getter/setter）',
        example:
          'public ${col.codeJava} get${col.codeNameUpperFirst}() {\n  return ${col.codeName};\n}',
      },
      {
        category: '列信息子项：单列的代码注释属性',
        name: '代码字段注释',
        value: 'codeComment',
        type: 'String',
        desc: '生成代码中字段的业务含义注释',
        example: '/**\n * ${col.codeComment}\n */\nprivate ${col.codeJava} ${col.codeName};',
      },
      {
        category: '列信息子项：单列的前端表单配置',
        name: '新增表单是否显示',
        value: 'fromInsert',
        type: 'Integer',
        desc: '列是否在新增表单中显示（枚举值：1=显示，0=隐藏）',
        example:
          '#if(${col.fromInsert} == 1)\n  <el-form-item label="${col.listComment}">\n    <el-${col.fromComponent} ...>\n  </el-form-item>\n#end',
      },
      {
        category: '列信息子项：单列的前端表单配置',
        name: '编辑表单是否显示',
        value: 'fromUpdate',
        type: 'Integer',
        desc: '列是否在编辑表单中显示（枚举值：1=显示，0=隐藏）',
        example:
          '#if(${col.fromUpdate} == 1)\n  <el-form-item label="${col.listComment}">\n    <el-${col.fromComponent} ...>\n  </el-form-item>\n#end',
      },
      {
        category: '列信息子项：单列的前端表单配置',
        name: '表单输入框长度',
        value: 'fromLength',
        type: 'Integer',
        desc: '前端表单输入框的最大长度限制',
        example:
          '<el-input v-model="form.${col.codeName}" :maxlength="${col.fromLength}"></el-input>',
      },
      {
        category: '列信息子项：单列的前端表单配置',
        name: '表单自动填充策略',
        value: 'fromFill',
        type: 'Integer',
        desc: '表单字段的自动填充规则（枚举值：1=创建时间，2=更新时间，3=当前用户）',
        example: '#if(${col.fromFill} == 1)\n  form.${col.codeName} = new Date();\n#end',
      },
      {
        category: '列信息子项：单列的前端表单配置',
        name: '前端表单组件类型',
        value: 'fromComponent',
        type: 'String',
        desc: '前端表单渲染时使用的组件（如input、select、date-picker）',
        example:
          '<el-form-item label="${col.listComment}">\n  <el-${col.fromComponent} v-model="form.${col.codeName}"></el-${col.fromComponent}>\n</el-form-item>',
      },
      {
        category: '列信息子项：单列的前端列表配置',
        name: '列表页是否显示',
        value: 'listShow',
        type: 'Integer',
        desc: '列是否在列表页展示（枚举值：1=显示，0=隐藏）',
        example:
          '#if(${col.listShow} == 1)\n  <el-table-column prop="${col.codeName}" label="${col.listComment}"></el-table-column>\n#end',
      },
      {
        category: '列信息子项：单列的前端列表配置',
        name: '列表页字段标题',
        value: 'listComment',
        type: 'String',
        desc: '列表页表头显示的字段名称（业务含义）',
        example: '<el-table-column label="${col.listComment}" ...>',
      },
      {
        category: '列信息子项：单列的前端列表配置',
        name: '列表页字段是否禁用',
        value: 'listDisabled',
        type: 'Integer',
        desc: '列表页中该字段是否禁用编辑（枚举值：1=禁用，0=启用）',
        example: '<el-table-column ... :disabled="${col.listDisabled} == 1"></el-table-column>',
      },
      {
        category: '列信息子项：单列的前端列表配置',
        name: '列表页是否隐藏',
        value: 'listHidden',
        type: 'Integer',
        desc: '列是否在列表页隐藏（枚举值：1=隐藏，0=显示，用于敏感字段）',
        example: '#if(${col.listHidden} == 0)\n  <el-table-column ... >\n#end',
      },
      {
        category: '列信息子项：单列的代码类型属性',
        name: 'Java数据类型',
        value: 'codeJava',
        type: 'String',
        desc: '列对应的Java数据类型（如String、Integer、LocalDateTime）',
        example: 'private ${col.codeJava} ${col.codeName};',
      },
      {
        category: '列信息子项：单列的代码类型属性',
        name: 'Java类型包路径',
        value: 'codeJavaPackage',
        type: 'String',
        desc: 'Java数据类型对应的全限定包路径',
        example: "#if(${col.codeJavaPackage} != '')\nimport ${col.codeJavaPackage};\n#end",
      },
      {
        category: '列信息子项：单列的前端类型属性',
        name: 'TypeScript数据类型',
        value: 'codeTs',
        type: 'String',
        desc: '列对应的TypeScript数据类型（如string、number）',
        example: 'interface ${codeNameUpperFirst} {\n  ${col.codeName}: ${col.codeTs};\n}',
      },
      {
        category: '列信息子项：单列的排序属性',
        name: '字段排序序号',
        value: 'sortOrder',
        type: 'Integer',
        desc: '字段在表单/列表中的显示顺序（值越小越靠前）',
        example: '<el-form-item ... :order="${col.sortOrder}">',
      },
    ],
  },
  {
    category:
      '列信息集合：核心字段配置，包含表所有列、主键列、过滤后列的详细信息，用于生成字段、表单、列表等',
    name: '主键列信息',
    value: 'pkColumn',
    type: 'Object',
    desc: '表的主键列详细信息（单列Map），无主键时返回空对象',
    example:
      '// 根据主键查询\npublic ${codeNameUpperFirst} getById(${pkColumn.codeJava} ${pkColumn.codeName}) {\n  return baseMapper.selectById(${pkColumn.codeName});\n}',
    info: [
      {
        category: '列信息子项：单列的基础标识属性',
        name: '列唯一ID',
        value: 'id',
        type: 'Long',
        desc: '列在系统中的唯一标识ID',
        example: '// 列配置ID\ncolumn.setId(${col.id});',
      },
      {
        category: '列信息子项：单列的数据库属性',
        name: '数据库字段名',
        value: 'dbName',
        type: 'String',
        desc: '数据库表中列的原始字段名',
        example: '@TableField("${col.dbName}")\nprivate ${col.codeJava} ${col.codeName};',
      },
      {
        category: '列信息子项：单列的数据库属性',
        name: '数据库字段类型',
        value: 'dbType',
        type: 'String',
        desc: '数据库中列的字段类型（如VARCHAR、INT、DATETIME）',
        example: "#if(${col.dbType} == 'VARCHAR')\n  // 字符串类型处理\n#end",
      },
      {
        category: '列信息子项：单列的数据库属性',
        name: '是否为主键',
        value: 'dbPrimary',
        type: 'Integer',
        desc: '列是否为主键（枚举值：1=是，0=否）',
        example:
          '#if(${col.dbPrimary} == 1)\n  @TableId\n#end\nprivate ${col.codeJava} ${col.codeName};',
      },
      {
        category: '列信息子项：单列的数据库属性',
        name: '是否为必填字段',
        value: 'dbRequired',
        type: 'Integer',
        desc: '列是否为数据库级必填（非空约束，枚举值：1=是，0=否）',
        example:
          '#if(${col.dbRequired} == 1)\n  <el-form-item prop="${col.codeName}" required>\n#else\n  <el-form-item prop="${col.codeName}">\n#end',
      },
      {
        category: '列信息子项：单列的数据库属性',
        name: '数据库字段注释',
        value: 'dbComment',
        type: 'String',
        desc: '数据库中列的业务含义注释',
        example: '// 数据库字段说明：${col.dbComment}',
      },
      {
        category: '列信息子项：单列的数据库属性',
        name: '数据库字段长度',
        value: 'dbLength',
        type: 'Integer',
        desc: '数据库中列的字段长度（如VARCHAR(50)对应长度50）',
        example: '@Column(length = ${col.dbLength})\nprivate ${col.codeJava} ${col.codeName};',
      },
      {
        category: '列信息子项：单列的代码命名属性',
        name: '代码字段名（首字母小写）',
        value: 'codeName',
        type: 'String',
        desc: '生成代码中列对应的字段名（首字母小写，如userName）',
        example: 'private ${col.codeJava} ${col.codeName};',
      },
      {
        category: '列信息子项：单列的代码命名属性',
        name: '代码字段名（首字母大写）',
        value: 'codeNameUpperFirst',
        type: 'String',
        desc: '生成代码中列对应的字段名（首字母大写，用于getter/setter）',
        example:
          'public ${col.codeJava} get${col.codeNameUpperFirst}() {\n  return ${col.codeName};\n}',
      },
      {
        category: '列信息子项：单列的代码注释属性',
        name: '代码字段注释',
        value: 'codeComment',
        type: 'String',
        desc: '生成代码中字段的业务含义注释',
        example: '/**\n * ${col.codeComment}\n */\nprivate ${col.codeJava} ${col.codeName};',
      },
      {
        category: '列信息子项：单列的前端表单配置',
        name: '新增表单是否显示',
        value: 'fromInsert',
        type: 'Integer',
        desc: '列是否在新增表单中显示（枚举值：1=显示，0=隐藏）',
        example:
          '#if(${col.fromInsert} == 1)\n  <el-form-item label="${col.listComment}">\n    <el-${col.fromComponent} ...>\n  </el-form-item>\n#end',
      },
      {
        category: '列信息子项：单列的前端表单配置',
        name: '编辑表单是否显示',
        value: 'fromUpdate',
        type: 'Integer',
        desc: '列是否在编辑表单中显示（枚举值：1=显示，0=隐藏）',
        example:
          '#if(${col.fromUpdate} == 1)\n  <el-form-item label="${col.listComment}">\n    <el-${col.fromComponent} ...>\n  </el-form-item>\n#end',
      },
      {
        category: '列信息子项：单列的前端表单配置',
        name: '表单输入框长度',
        value: 'fromLength',
        type: 'Integer',
        desc: '前端表单输入框的最大长度限制',
        example:
          '<el-input v-model="form.${col.codeName}" :maxlength="${col.fromLength}"></el-input>',
      },
      {
        category: '列信息子项：单列的前端表单配置',
        name: '表单自动填充策略',
        value: 'fromFill',
        type: 'Integer',
        desc: '表单字段的自动填充规则（枚举值：1=创建时间，2=更新时间，3=当前用户）',
        example: '#if(${col.fromFill} == 1)\n  form.${col.codeName} = new Date();\n#end',
      },
      {
        category: '列信息子项：单列的前端表单配置',
        name: '前端表单组件类型',
        value: 'fromComponent',
        type: 'String',
        desc: '前端表单渲染时使用的组件（如input、select、date-picker）',
        example:
          '<el-form-item label="${col.listComment}">\n  <el-${col.fromComponent} v-model="form.${col.codeName}"></el-${col.fromComponent}>\n</el-form-item>',
      },
      {
        category: '列信息子项：单列的前端列表配置',
        name: '列表页是否显示',
        value: 'listShow',
        type: 'Integer',
        desc: '列是否在列表页展示（枚举值：1=显示，0=隐藏）',
        example:
          '#if(${col.listShow} == 1)\n  <el-table-column prop="${col.codeName}" label="${col.listComment}"></el-table-column>\n#end',
      },
      {
        category: '列信息子项：单列的前端列表配置',
        name: '列表页字段标题',
        value: 'listComment',
        type: 'String',
        desc: '列表页表头显示的字段名称（业务含义）',
        example: '<el-table-column label="${col.listComment}" ...>',
      },
      {
        category: '列信息子项：单列的前端列表配置',
        name: '列表页字段是否禁用',
        value: 'listDisabled',
        type: 'Integer',
        desc: '列表页中该字段是否禁用编辑（枚举值：1=禁用，0=启用）',
        example: '<el-table-column ... :disabled="${col.listDisabled} == 1"></el-table-column>',
      },
      {
        category: '列信息子项：单列的前端列表配置',
        name: '列表页是否隐藏',
        value: 'listHidden',
        type: 'Integer',
        desc: '列是否在列表页隐藏（枚举值：1=隐藏，0=显示，用于敏感字段）',
        example: '#if(${col.listHidden} == 0)\n  <el-table-column ... >\n#end',
      },
      {
        category: '列信息子项：单列的代码类型属性',
        name: 'Java数据类型',
        value: 'codeJava',
        type: 'String',
        desc: '列对应的Java数据类型（如String、Integer、LocalDateTime）',
        example: 'private ${col.codeJava} ${col.codeName};',
      },
      {
        category: '列信息子项：单列的代码类型属性',
        name: 'Java类型包路径',
        value: 'codeJavaPackage',
        type: 'String',
        desc: 'Java数据类型对应的全限定包路径',
        example: "#if(${col.codeJavaPackage} != '')\nimport ${col.codeJavaPackage};\n#end",
      },
      {
        category: '列信息子项：单列的前端类型属性',
        name: 'TypeScript数据类型',
        value: 'codeTs',
        type: 'String',
        desc: '列对应的TypeScript数据类型（如string、number）',
        example: 'interface ${codeNameUpperFirst} {\n  ${col.codeName}: ${col.codeTs};\n}',
      },
      {
        category: '列信息子项：单列的排序属性',
        name: '字段排序序号',
        value: 'sortOrder',
        type: 'Integer',
        desc: '字段在表单/列表中的显示顺序（值越小越靠前）',
        example: '<el-form-item ... :order="${col.sortOrder}">',
      },
    ],
  },
  {
    category:
      '列信息集合：核心字段配置，包含表所有列、主键列、过滤后列的详细信息，用于生成字段、表单、列表等',
    name: '过滤后列信息集合',
    value: 'column',
    type: 'Array',
    desc: '按当前模板需求过滤后的列信息集合（如仅包含“新增表单显示”的列）',
    example:
      '#foreach($col in ${column}) // 遍历新增表单显示的列\n  <el-form-item label="${col.listComment}">\n    <el-${col.fromComponent} v-model="form.${col.codeName}"></el-${col.fromComponent}>\n  </el-form-item>\n#end',
    info: [
      {
        category: '列信息子项：单列的基础标识属性',
        name: '列唯一ID',
        value: 'id',
        type: 'Long',
        desc: '列在系统中的唯一标识ID',
        example: '// 列配置ID\ncolumn.setId(${col.id});',
      },
      {
        category: '列信息子项：单列的数据库属性',
        name: '数据库字段名',
        value: 'dbName',
        type: 'String',
        desc: '数据库表中列的原始字段名',
        example: '@TableField("${col.dbName}")\nprivate ${col.codeJava} ${col.codeName};',
      },
      {
        category: '列信息子项：单列的数据库属性',
        name: '数据库字段类型',
        value: 'dbType',
        type: 'String',
        desc: '数据库中列的字段类型（如VARCHAR、INT、DATETIME）',
        example: "#if(${col.dbType} == 'VARCHAR')\n  // 字符串类型处理\n#end",
      },
      {
        category: '列信息子项：单列的数据库属性',
        name: '是否为主键',
        value: 'dbPrimary',
        type: 'Integer',
        desc: '列是否为主键（枚举值：1=是，0=否）',
        example:
          '#if(${col.dbPrimary} == 1)\n  @TableId\n#end\nprivate ${col.codeJava} ${col.codeName};',
      },
      {
        category: '列信息子项：单列的数据库属性',
        name: '是否为必填字段',
        value: 'dbRequired',
        type: 'Integer',
        desc: '列是否为数据库级必填（非空约束，枚举值：1=是，0=否）',
        example:
          '#if(${col.dbRequired} == 1)\n  <el-form-item prop="${col.codeName}" required>\n#else\n  <el-form-item prop="${col.codeName}">\n#end',
      },
      {
        category: '列信息子项：单列的数据库属性',
        name: '数据库字段注释',
        value: 'dbComment',
        type: 'String',
        desc: '数据库中列的业务含义注释',
        example: '// 数据库字段说明：${col.dbComment}',
      },
      {
        category: '列信息子项：单列的数据库属性',
        name: '数据库字段长度',
        value: 'dbLength',
        type: 'Integer',
        desc: '数据库中列的字段长度（如VARCHAR(50)对应长度50）',
        example: '@Column(length = ${col.dbLength})\nprivate ${col.codeJava} ${col.codeName};',
      },
      {
        category: '列信息子项：单列的代码命名属性',
        name: '代码字段名（首字母小写）',
        value: 'codeName',
        type: 'String',
        desc: '生成代码中列对应的字段名（首字母小写，如userName）',
        example: 'private ${col.codeJava} ${col.codeName};',
      },
      {
        category: '列信息子项：单列的代码命名属性',
        name: '代码字段名（首字母大写）',
        value: 'codeNameUpperFirst',
        type: 'String',
        desc: '生成代码中列对应的字段名（首字母大写，用于getter/setter）',
        example:
          'public ${col.codeJava} get${col.codeNameUpperFirst}() {\n  return ${col.codeName};\n}',
      },
      {
        category: '列信息子项：单列的代码注释属性',
        name: '代码字段注释',
        value: 'codeComment',
        type: 'String',
        desc: '生成代码中字段的业务含义注释',
        example: '/**\n * ${col.codeComment}\n */\nprivate ${col.codeJava} ${col.codeName};',
      },
      {
        category: '列信息子项：单列的前端表单配置',
        name: '新增表单是否显示',
        value: 'fromInsert',
        type: 'Integer',
        desc: '列是否在新增表单中显示（枚举值：1=显示，0=隐藏）',
        example:
          '#if(${col.fromInsert} == 1)\n  <el-form-item label="${col.listComment}">\n    <el-${col.fromComponent} ...>\n  </el-form-item>\n#end',
      },
      {
        category: '列信息子项：单列的前端表单配置',
        name: '编辑表单是否显示',
        value: 'fromUpdate',
        type: 'Integer',
        desc: '列是否在编辑表单中显示（枚举值：1=显示，0=隐藏）',
        example:
          '#if(${col.fromUpdate} == 1)\n  <el-form-item label="${col.listComment}">\n    <el-${col.fromComponent} ...>\n  </el-form-item>\n#end',
      },
      {
        category: '列信息子项：单列的前端表单配置',
        name: '表单输入框长度',
        value: 'fromLength',
        type: 'Integer',
        desc: '前端表单输入框的最大长度限制',
        example:
          '<el-input v-model="form.${col.codeName}" :maxlength="${col.fromLength}"></el-input>',
      },
      {
        category: '列信息子项：单列的前端表单配置',
        name: '表单自动填充策略',
        value: 'fromFill',
        type: 'Integer',
        desc: '表单字段的自动填充规则（枚举值：1=创建时间，2=更新时间，3=当前用户）',
        example: '#if(${col.fromFill} == 1)\n  form.${col.codeName} = new Date();\n#end',
      },
      {
        category: '列信息子项：单列的前端表单配置',
        name: '前端表单组件类型',
        value: 'fromComponent',
        type: 'String',
        desc: '前端表单渲染时使用的组件（如input、select、date-picker）',
        example:
          '<el-form-item label="${col.listComment}">\n  <el-${col.fromComponent} v-model="form.${col.codeName}"></el-${col.fromComponent}>\n</el-form-item>',
      },
      {
        category: '列信息子项：单列的前端列表配置',
        name: '列表页是否显示',
        value: 'listShow',
        type: 'Integer',
        desc: '列是否在列表页展示（枚举值：1=显示，0=隐藏）',
        example:
          '#if(${col.listShow} == 1)\n  <el-table-column prop="${col.codeName}" label="${col.listComment}"></el-table-column>\n#end',
      },
      {
        category: '列信息子项：单列的前端列表配置',
        name: '列表页字段标题',
        value: 'listComment',
        type: 'String',
        desc: '列表页表头显示的字段名称（业务含义）',
        example: '<el-table-column label="${col.listComment}" ...>',
      },
      {
        category: '列信息子项：单列的前端列表配置',
        name: '列表页字段是否禁用',
        value: 'listDisabled',
        type: 'Integer',
        desc: '列表页中该字段是否禁用编辑（枚举值：1=禁用，0=启用）',
        example: '<el-table-column ... :disabled="${col.listDisabled} == 1"></el-table-column>',
      },
      {
        category: '列信息子项：单列的前端列表配置',
        name: '列表页是否隐藏',
        value: 'listHidden',
        type: 'Integer',
        desc: '列是否在列表页隐藏（枚举值：1=隐藏，0=显示，用于敏感字段）',
        example: '#if(${col.listHidden} == 0)\n  <el-table-column ... >\n#end',
      },
      {
        category: '列信息子项：单列的代码类型属性',
        name: 'Java数据类型',
        value: 'codeJava',
        type: 'String',
        desc: '列对应的Java数据类型（如String、Integer、LocalDateTime）',
        example: 'private ${col.codeJava} ${col.codeName};',
      },
      {
        category: '列信息子项：单列的代码类型属性',
        name: 'Java类型包路径',
        value: 'codeJavaPackage',
        type: 'String',
        desc: 'Java数据类型对应的全限定包路径',
        example: "#if(${col.codeJavaPackage} != '')\nimport ${col.codeJavaPackage};\n#end",
      },
      {
        category: '列信息子项：单列的前端类型属性',
        name: 'TypeScript数据类型',
        value: 'codeTs',
        type: 'String',
        desc: '列对应的TypeScript数据类型（如string、number）',
        example: 'interface ${codeNameUpperFirst} {\n  ${col.codeName}: ${col.codeTs};\n}',
      },
      {
        category: '列信息子项：单列的排序属性',
        name: '字段排序序号',
        value: 'sortOrder',
        type: 'Integer',
        desc: '字段在表单/列表中的显示顺序（值越小越靠前）',
        example: '<el-form-item ... :order="${col.sortOrder}">',
      },
    ],
  },
]
export default config
